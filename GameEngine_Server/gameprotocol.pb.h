// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameprotocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gameprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gameprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gameprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gameprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameprotocol_2eproto;
namespace gameprotocol {
class Bullet;
struct BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class GameScene;
struct GameSceneDefaultTypeInternal;
extern GameSceneDefaultTypeInternal _GameScene_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class UserInput;
struct UserInputDefaultTypeInternal;
extern UserInputDefaultTypeInternal _UserInput_default_instance_;
class quaternion;
struct quaternionDefaultTypeInternal;
extern quaternionDefaultTypeInternal _quaternion_default_instance_;
class vector3;
struct vector3DefaultTypeInternal;
extern vector3DefaultTypeInternal _vector3_default_instance_;
}  // namespace gameprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::gameprotocol::Bullet* Arena::CreateMaybeMessage<::gameprotocol::Bullet>(Arena*);
template<> ::gameprotocol::GameScene* Arena::CreateMaybeMessage<::gameprotocol::GameScene>(Arena*);
template<> ::gameprotocol::Player* Arena::CreateMaybeMessage<::gameprotocol::Player>(Arena*);
template<> ::gameprotocol::UserInput* Arena::CreateMaybeMessage<::gameprotocol::UserInput>(Arena*);
template<> ::gameprotocol::quaternion* Arena::CreateMaybeMessage<::gameprotocol::quaternion>(Arena*);
template<> ::gameprotocol::vector3* Arena::CreateMaybeMessage<::gameprotocol::vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gameprotocol {

// ===================================================================

class vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameprotocol.vector3) */ {
 public:
  inline vector3() : vector3(nullptr) {}
  ~vector3() override;
  explicit PROTOBUF_CONSTEXPR vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vector3(const vector3& from);
  vector3(vector3&& from) noexcept
    : vector3() {
    *this = ::std::move(from);
  }

  inline vector3& operator=(const vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector3& operator=(vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const vector3* internal_default_instance() {
    return reinterpret_cast<const vector3*>(
               &_vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector3& a, vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const vector3& from) {
    vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameprotocol.vector3";
  }
  protected:
  explicit vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameprotocol.vector3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameprotocol_2eproto;
};
// -------------------------------------------------------------------

class quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameprotocol.quaternion) */ {
 public:
  inline quaternion() : quaternion(nullptr) {}
  ~quaternion() override;
  explicit PROTOBUF_CONSTEXPR quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  quaternion(const quaternion& from);
  quaternion(quaternion&& from) noexcept
    : quaternion() {
    *this = ::std::move(from);
  }

  inline quaternion& operator=(const quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline quaternion& operator=(quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const quaternion* internal_default_instance() {
    return reinterpret_cast<const quaternion*>(
               &_quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(quaternion& a, quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const quaternion& from) {
    quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameprotocol.quaternion";
  }
  protected:
  explicit quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // required float w = 1;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // required float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 4;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameprotocol.quaternion)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float w_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameprotocol_2eproto;
};
// -------------------------------------------------------------------

class UserInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameprotocol.UserInput) */ {
 public:
  inline UserInput() : UserInput(nullptr) {}
  ~UserInput() override;
  explicit PROTOBUF_CONSTEXPR UserInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInput(const UserInput& from);
  UserInput(UserInput&& from) noexcept
    : UserInput() {
    *this = ::std::move(from);
  }

  inline UserInput& operator=(const UserInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInput& operator=(UserInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInput* internal_default_instance() {
    return reinterpret_cast<const UserInput*>(
               &_UserInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInput& a, UserInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInput& from) {
    UserInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameprotocol.UserInput";
  }
  protected:
  explicit UserInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required int32 input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  int32_t input() const;
  void set_input(int32_t value);
  private:
  int32_t _internal_input() const;
  void _internal_set_input(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gameprotocol.UserInput)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t id_;
    int32_t input_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameprotocol.GameScene) */ {
 public:
  inline GameScene() : GameScene(nullptr) {}
  ~GameScene() override;
  explicit PROTOBUF_CONSTEXPR GameScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameScene(const GameScene& from);
  GameScene(GameScene&& from) noexcept
    : GameScene() {
    *this = ::std::move(from);
  }

  inline GameScene& operator=(const GameScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameScene& operator=(GameScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameScene* internal_default_instance() {
    return reinterpret_cast<const GameScene*>(
               &_GameScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameScene& a, GameScene& b) {
    a.Swap(&b);
  }
  inline void Swap(GameScene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameScene& from) {
    GameScene::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameScene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameprotocol.GameScene";
  }
  protected:
  explicit GameScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kBulletsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .gameprotocol.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::gameprotocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Player >*
      mutable_players();
  private:
  const ::gameprotocol::Player& _internal_players(int index) const;
  ::gameprotocol::Player* _internal_add_players();
  public:
  const ::gameprotocol::Player& players(int index) const;
  ::gameprotocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Player >&
      players() const;

  // repeated .gameprotocol.Bullet bullets = 3;
  int bullets_size() const;
  private:
  int _internal_bullets_size() const;
  public:
  void clear_bullets();
  ::gameprotocol::Bullet* mutable_bullets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Bullet >*
      mutable_bullets();
  private:
  const ::gameprotocol::Bullet& _internal_bullets(int index) const;
  ::gameprotocol::Bullet* _internal_add_bullets();
  public:
  const ::gameprotocol::Bullet& bullets(int index) const;
  ::gameprotocol::Bullet* add_bullets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Bullet >&
      bullets() const;

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gameprotocol.GameScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Bullet > bullets_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameprotocol_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameprotocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameprotocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // required .gameprotocol.vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::gameprotocol::vector3& position() const;
  PROTOBUF_NODISCARD ::gameprotocol::vector3* release_position();
  ::gameprotocol::vector3* mutable_position();
  void set_allocated_position(::gameprotocol::vector3* position);
  private:
  const ::gameprotocol::vector3& _internal_position() const;
  ::gameprotocol::vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::gameprotocol::vector3* position);
  ::gameprotocol::vector3* unsafe_arena_release_position();

  // required .gameprotocol.vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::gameprotocol::vector3& velocity() const;
  PROTOBUF_NODISCARD ::gameprotocol::vector3* release_velocity();
  ::gameprotocol::vector3* mutable_velocity();
  void set_allocated_velocity(::gameprotocol::vector3* velocity);
  private:
  const ::gameprotocol::vector3& _internal_velocity() const;
  ::gameprotocol::vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::gameprotocol::vector3* velocity);
  ::gameprotocol::vector3* unsafe_arena_release_velocity();

  // required .gameprotocol.quaternion orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::gameprotocol::quaternion& orientation() const;
  PROTOBUF_NODISCARD ::gameprotocol::quaternion* release_orientation();
  ::gameprotocol::quaternion* mutable_orientation();
  void set_allocated_orientation(::gameprotocol::quaternion* orientation);
  private:
  const ::gameprotocol::quaternion& _internal_orientation() const;
  ::gameprotocol::quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::gameprotocol::quaternion* orientation);
  ::gameprotocol::quaternion* unsafe_arena_release_orientation();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gameprotocol.Player)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::gameprotocol::vector3* position_;
    ::gameprotocol::vector3* velocity_;
    ::gameprotocol::quaternion* orientation_;
    int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameprotocol_2eproto;
};
// -------------------------------------------------------------------

class Bullet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameprotocol.Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {}
  ~Bullet() override;
  explicit PROTOBUF_CONSTEXPR Bullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bullet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bullet& from) {
    Bullet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameprotocol.Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // required .gameprotocol.vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::gameprotocol::vector3& position() const;
  PROTOBUF_NODISCARD ::gameprotocol::vector3* release_position();
  ::gameprotocol::vector3* mutable_position();
  void set_allocated_position(::gameprotocol::vector3* position);
  private:
  const ::gameprotocol::vector3& _internal_position() const;
  ::gameprotocol::vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::gameprotocol::vector3* position);
  ::gameprotocol::vector3* unsafe_arena_release_position();

  // required .gameprotocol.vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::gameprotocol::vector3& velocity() const;
  PROTOBUF_NODISCARD ::gameprotocol::vector3* release_velocity();
  ::gameprotocol::vector3* mutable_velocity();
  void set_allocated_velocity(::gameprotocol::vector3* velocity);
  private:
  const ::gameprotocol::vector3& _internal_velocity() const;
  ::gameprotocol::vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::gameprotocol::vector3* velocity);
  ::gameprotocol::vector3* unsafe_arena_release_velocity();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gameprotocol.Bullet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::gameprotocol::vector3* position_;
    ::gameprotocol::vector3* velocity_;
    int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector3

// required float x = 1;
inline bool vector3::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool vector3::has_x() const {
  return _internal_has_x();
}
inline void vector3::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float vector3::_internal_x() const {
  return _impl_.x_;
}
inline float vector3::x() const {
  // @@protoc_insertion_point(field_get:gameprotocol.vector3.x)
  return _internal_x();
}
inline void vector3::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:gameprotocol.vector3.x)
}

// required float y = 2;
inline bool vector3::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool vector3::has_y() const {
  return _internal_has_y();
}
inline void vector3::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float vector3::_internal_y() const {
  return _impl_.y_;
}
inline float vector3::y() const {
  // @@protoc_insertion_point(field_get:gameprotocol.vector3.y)
  return _internal_y();
}
inline void vector3::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:gameprotocol.vector3.y)
}

// required float z = 3;
inline bool vector3::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool vector3::has_z() const {
  return _internal_has_z();
}
inline void vector3::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float vector3::_internal_z() const {
  return _impl_.z_;
}
inline float vector3::z() const {
  // @@protoc_insertion_point(field_get:gameprotocol.vector3.z)
  return _internal_z();
}
inline void vector3::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:gameprotocol.vector3.z)
}

// -------------------------------------------------------------------

// quaternion

// required float w = 1;
inline bool quaternion::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool quaternion::has_w() const {
  return _internal_has_w();
}
inline void quaternion::clear_w() {
  _impl_.w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float quaternion::_internal_w() const {
  return _impl_.w_;
}
inline float quaternion::w() const {
  // @@protoc_insertion_point(field_get:gameprotocol.quaternion.w)
  return _internal_w();
}
inline void quaternion::_internal_set_w(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.w_ = value;
}
inline void quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:gameprotocol.quaternion.w)
}

// required float x = 2;
inline bool quaternion::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool quaternion::has_x() const {
  return _internal_has_x();
}
inline void quaternion::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float quaternion::_internal_x() const {
  return _impl_.x_;
}
inline float quaternion::x() const {
  // @@protoc_insertion_point(field_get:gameprotocol.quaternion.x)
  return _internal_x();
}
inline void quaternion::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_ = value;
}
inline void quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:gameprotocol.quaternion.x)
}

// required float y = 3;
inline bool quaternion::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool quaternion::has_y() const {
  return _internal_has_y();
}
inline void quaternion::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float quaternion::_internal_y() const {
  return _impl_.y_;
}
inline float quaternion::y() const {
  // @@protoc_insertion_point(field_get:gameprotocol.quaternion.y)
  return _internal_y();
}
inline void quaternion::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y_ = value;
}
inline void quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:gameprotocol.quaternion.y)
}

// required float z = 4;
inline bool quaternion::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool quaternion::has_z() const {
  return _internal_has_z();
}
inline void quaternion::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float quaternion::_internal_z() const {
  return _impl_.z_;
}
inline float quaternion::z() const {
  // @@protoc_insertion_point(field_get:gameprotocol.quaternion.z)
  return _internal_z();
}
inline void quaternion::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.z_ = value;
}
inline void quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:gameprotocol.quaternion.z)
}

// -------------------------------------------------------------------

// UserInput

// required int32 id = 1;
inline bool UserInput::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInput::has_id() const {
  return _internal_has_id();
}
inline void UserInput::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UserInput::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserInput::id() const {
  // @@protoc_insertion_point(field_get:gameprotocol.UserInput.id)
  return _internal_id();
}
inline void UserInput::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void UserInput::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gameprotocol.UserInput.id)
}

// required int32 input = 2;
inline bool UserInput::_internal_has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInput::has_input() const {
  return _internal_has_input();
}
inline void UserInput::clear_input() {
  _impl_.input_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t UserInput::_internal_input() const {
  return _impl_.input_;
}
inline int32_t UserInput::input() const {
  // @@protoc_insertion_point(field_get:gameprotocol.UserInput.input)
  return _internal_input();
}
inline void UserInput::_internal_set_input(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.input_ = value;
}
inline void UserInput::set_input(int32_t value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:gameprotocol.UserInput.input)
}

// -------------------------------------------------------------------

// GameScene

// required int32 id = 1;
inline bool GameScene::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameScene::has_id() const {
  return _internal_has_id();
}
inline void GameScene::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t GameScene::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GameScene::id() const {
  // @@protoc_insertion_point(field_get:gameprotocol.GameScene.id)
  return _internal_id();
}
inline void GameScene::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void GameScene::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gameprotocol.GameScene.id)
}

// repeated .gameprotocol.Player players = 2;
inline int GameScene::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int GameScene::players_size() const {
  return _internal_players_size();
}
inline void GameScene::clear_players() {
  _impl_.players_.Clear();
}
inline ::gameprotocol::Player* GameScene::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:gameprotocol.GameScene.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Player >*
GameScene::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:gameprotocol.GameScene.players)
  return &_impl_.players_;
}
inline const ::gameprotocol::Player& GameScene::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::gameprotocol::Player& GameScene::players(int index) const {
  // @@protoc_insertion_point(field_get:gameprotocol.GameScene.players)
  return _internal_players(index);
}
inline ::gameprotocol::Player* GameScene::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::gameprotocol::Player* GameScene::add_players() {
  ::gameprotocol::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:gameprotocol.GameScene.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Player >&
GameScene::players() const {
  // @@protoc_insertion_point(field_list:gameprotocol.GameScene.players)
  return _impl_.players_;
}

// repeated .gameprotocol.Bullet bullets = 3;
inline int GameScene::_internal_bullets_size() const {
  return _impl_.bullets_.size();
}
inline int GameScene::bullets_size() const {
  return _internal_bullets_size();
}
inline void GameScene::clear_bullets() {
  _impl_.bullets_.Clear();
}
inline ::gameprotocol::Bullet* GameScene::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:gameprotocol.GameScene.bullets)
  return _impl_.bullets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Bullet >*
GameScene::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:gameprotocol.GameScene.bullets)
  return &_impl_.bullets_;
}
inline const ::gameprotocol::Bullet& GameScene::_internal_bullets(int index) const {
  return _impl_.bullets_.Get(index);
}
inline const ::gameprotocol::Bullet& GameScene::bullets(int index) const {
  // @@protoc_insertion_point(field_get:gameprotocol.GameScene.bullets)
  return _internal_bullets(index);
}
inline ::gameprotocol::Bullet* GameScene::_internal_add_bullets() {
  return _impl_.bullets_.Add();
}
inline ::gameprotocol::Bullet* GameScene::add_bullets() {
  ::gameprotocol::Bullet* _add = _internal_add_bullets();
  // @@protoc_insertion_point(field_add:gameprotocol.GameScene.bullets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameprotocol::Bullet >&
GameScene::bullets() const {
  // @@protoc_insertion_point(field_list:gameprotocol.GameScene.bullets)
  return _impl_.bullets_;
}

// -------------------------------------------------------------------

// Player

// required int32 state = 1;
inline bool Player::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Player::has_state() const {
  return _internal_has_state();
}
inline void Player::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Player::_internal_state() const {
  return _impl_.state_;
}
inline int32_t Player::state() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Player.state)
  return _internal_state();
}
inline void Player::_internal_set_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void Player::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:gameprotocol.Player.state)
}

// required .gameprotocol.vector3 position = 2;
inline bool Player::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Player::has_position() const {
  return _internal_has_position();
}
inline void Player::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gameprotocol::vector3& Player::_internal_position() const {
  const ::gameprotocol::vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameprotocol::vector3&>(
      ::gameprotocol::_vector3_default_instance_);
}
inline const ::gameprotocol::vector3& Player::position() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(
    ::gameprotocol::vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameprotocol.Player.position)
}
inline ::gameprotocol::vector3* Player::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gameprotocol::vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameprotocol::vector3* Player::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:gameprotocol.Player.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gameprotocol::vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::gameprotocol::vector3* Player::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameprotocol::vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::gameprotocol::vector3* Player::mutable_position() {
  ::gameprotocol::vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:gameprotocol.Player.position)
  return _msg;
}
inline void Player::set_allocated_position(::gameprotocol::vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gameprotocol.Player.position)
}

// required .gameprotocol.vector3 velocity = 3;
inline bool Player::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool Player::has_velocity() const {
  return _internal_has_velocity();
}
inline void Player::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::gameprotocol::vector3& Player::_internal_velocity() const {
  const ::gameprotocol::vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameprotocol::vector3&>(
      ::gameprotocol::_vector3_default_instance_);
}
inline const ::gameprotocol::vector3& Player::velocity() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Player.velocity)
  return _internal_velocity();
}
inline void Player::unsafe_arena_set_allocated_velocity(
    ::gameprotocol::vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameprotocol.Player.velocity)
}
inline ::gameprotocol::vector3* Player::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gameprotocol::vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameprotocol::vector3* Player::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:gameprotocol.Player.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gameprotocol::vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::gameprotocol::vector3* Player::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameprotocol::vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::gameprotocol::vector3* Player::mutable_velocity() {
  ::gameprotocol::vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:gameprotocol.Player.velocity)
  return _msg;
}
inline void Player::set_allocated_velocity(::gameprotocol::vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:gameprotocol.Player.velocity)
}

// required .gameprotocol.quaternion orientation = 4;
inline bool Player::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool Player::has_orientation() const {
  return _internal_has_orientation();
}
inline void Player::clear_orientation() {
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::gameprotocol::quaternion& Player::_internal_orientation() const {
  const ::gameprotocol::quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameprotocol::quaternion&>(
      ::gameprotocol::_quaternion_default_instance_);
}
inline const ::gameprotocol::quaternion& Player::orientation() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Player.orientation)
  return _internal_orientation();
}
inline void Player::unsafe_arena_set_allocated_orientation(
    ::gameprotocol::quaternion* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameprotocol.Player.orientation)
}
inline ::gameprotocol::quaternion* Player::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gameprotocol::quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameprotocol::quaternion* Player::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:gameprotocol.Player.orientation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gameprotocol::quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::gameprotocol::quaternion* Player::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameprotocol::quaternion>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::gameprotocol::quaternion* Player::mutable_orientation() {
  ::gameprotocol::quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:gameprotocol.Player.orientation)
  return _msg;
}
inline void Player::set_allocated_orientation(::gameprotocol::quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:gameprotocol.Player.orientation)
}

// -------------------------------------------------------------------

// Bullet

// required int32 state = 1;
inline bool Bullet::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bullet::has_state() const {
  return _internal_has_state();
}
inline void Bullet::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Bullet::_internal_state() const {
  return _impl_.state_;
}
inline int32_t Bullet::state() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Bullet.state)
  return _internal_state();
}
inline void Bullet::_internal_set_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.state_ = value;
}
inline void Bullet::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:gameprotocol.Bullet.state)
}

// required .gameprotocol.vector3 position = 2;
inline bool Bullet::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Bullet::has_position() const {
  return _internal_has_position();
}
inline void Bullet::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gameprotocol::vector3& Bullet::_internal_position() const {
  const ::gameprotocol::vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameprotocol::vector3&>(
      ::gameprotocol::_vector3_default_instance_);
}
inline const ::gameprotocol::vector3& Bullet::position() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Bullet.position)
  return _internal_position();
}
inline void Bullet::unsafe_arena_set_allocated_position(
    ::gameprotocol::vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameprotocol.Bullet.position)
}
inline ::gameprotocol::vector3* Bullet::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gameprotocol::vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameprotocol::vector3* Bullet::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:gameprotocol.Bullet.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gameprotocol::vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::gameprotocol::vector3* Bullet::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameprotocol::vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::gameprotocol::vector3* Bullet::mutable_position() {
  ::gameprotocol::vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:gameprotocol.Bullet.position)
  return _msg;
}
inline void Bullet::set_allocated_position(::gameprotocol::vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gameprotocol.Bullet.position)
}

// required .gameprotocol.vector3 velocity = 3;
inline bool Bullet::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool Bullet::has_velocity() const {
  return _internal_has_velocity();
}
inline void Bullet::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::gameprotocol::vector3& Bullet::_internal_velocity() const {
  const ::gameprotocol::vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::gameprotocol::vector3&>(
      ::gameprotocol::_vector3_default_instance_);
}
inline const ::gameprotocol::vector3& Bullet::velocity() const {
  // @@protoc_insertion_point(field_get:gameprotocol.Bullet.velocity)
  return _internal_velocity();
}
inline void Bullet::unsafe_arena_set_allocated_velocity(
    ::gameprotocol::vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gameprotocol.Bullet.velocity)
}
inline ::gameprotocol::vector3* Bullet::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gameprotocol::vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gameprotocol::vector3* Bullet::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:gameprotocol.Bullet.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gameprotocol::vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::gameprotocol::vector3* Bullet::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gameprotocol::vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::gameprotocol::vector3* Bullet::mutable_velocity() {
  ::gameprotocol::vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:gameprotocol.Bullet.velocity)
  return _msg;
}
inline void Bullet::set_allocated_velocity(::gameprotocol::vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:gameprotocol.Bullet.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gameprotocol_2eproto
